/**
 * Copyright (c) 2016 LARUS Business Automation [http://www.larus-ba.it]
 * <p>
 * This file is part of the "LARUS Integration Framework for Neo4j".
 * <p>
 * The "LARUS Integration Framework for Neo4j" is licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <p>
 * Created on 03/02/16
 */
package it.larusba.neo4j.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Calendar;

/**
 * @author AgileLARUS
 * @since 3.0.0
 */
public abstract class PreparedStatement extends Statement implements java.sql.PreparedStatement {

	/*----------------------------*/
	/*       Execute method       */
	/*----------------------------*/

	@Override public abstract boolean execute() throws SQLException;

	@Override public abstract ResultSet executeQuery() throws SQLException;

	@Override public abstract int executeUpdate() throws SQLException;

	@Override public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new SQLException("Method execute(String, int) cannot be called on PreparedStatement");
	}

	@Override public boolean execute(String sql) throws SQLException {
		throw new SQLException("Method execute(String) cannot be called on PreparedStatement");
	}

	@Override public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLException("Method execute(String, int[]) cannot be called on PreparedStatement");
	}

	@Override public boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new SQLException("Method execute(String, String[]) cannot be called on PreparedStatement");
	}

	@Override public ResultSet executeQuery(String sql) throws SQLException {
		throw new SQLException("Method executeQuery(String) cannot be called on PreparedStatement");
	}

	@Override public int executeUpdate(String sql) throws SQLException {
		throw new SQLException("Method executeUpdate(String) cannot be called on PreparedStatement");
	}

	@Override public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new SQLException("Method executeUpdate(String, int) cannot be called on PreparedStatement");
	}

	@Override public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new SQLException("Method executeUpdate(String, int[]) cannot be called on PreparedStatement");
	}

	@Override public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new SQLException("Method executeUpdate(String, String[]) cannot be called on PreparedStatement");
	}

	/*------------------------------*/
	/*       ResultSet method       */
	/*------------------------------*/

	@Override public abstract ResultSetMetaData getMetaData() throws SQLException;

	/*------------------------------*/
	/*       Parameter method       */
	/*------------------------------*/

	@Override public abstract ParameterMetaData getParameterMetaData() throws SQLException;

	@Override public abstract void clearParameters() throws SQLException;

	@Override public abstract void setShort(int parameterIndex, short x) throws SQLException;

	@Override public abstract void setInt(int parameterIndex, int x) throws SQLException;

	@Override public abstract void setLong(int parameterIndex, long x) throws SQLException;

	@Override public abstract void setFloat(int parameterIndex, float x) throws SQLException;

	@Override public abstract void setDouble(int parameterIndex, double x) throws SQLException;

	@Override public abstract void setNull(int parameterIndex, int sqlType) throws SQLException;

	@Override public abstract void setBoolean(int parameterIndex, boolean x) throws SQLException;

	@Override public abstract void setString(int parameterIndex, String x) throws SQLException;

	@Override public void setByte(int parameterIndex, byte x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setDate(int parameterIndex, Date x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setTime(int parameterIndex, Time x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setObject(int parameterIndex, Object x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setRef(int parameterIndex, Ref x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBlob(int parameterIndex, Blob x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setClob(int parameterIndex, Clob x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setArray(int parameterIndex, java.sql.Array x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setURL(int parameterIndex, URL x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setRowId(int parameterIndex, RowId x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setNString(int parameterIndex, String value) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setNClob(int parameterIndex, NClob value) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setClob(int parameterIndex, Reader reader) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	/*--------------------------*/
	/*       Batch method       */
	/*--------------------------*/

	@Override public void addBatch() throws SQLException {
		throw new UnsupportedOperationException("Not implemented yet.");
	}

	@Override public void addBatch(String sql) throws SQLException {
		throw new SQLException("Method addBatch(String sql) cannot be called on PreparedStatement");
	}

}
